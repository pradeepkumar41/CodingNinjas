package LinkListQuestion;

import java.util.Scanner;

import DataStructure.node;

class Node {
	public int data;
	public node next;
	public node(int data) {
		this.data=data;
		//	  	this.next = null;
	}
}
public class KReverse {

	reverseK(Node head,int k)
	{

	Node prev=null;
	Node curr=head;
	while(curr!=null && k>0){
		k--;
		Node next=curr.next;
		curr.next=prev;
		prev=curr;
		curr=next;

	}
	if(curr!=null)
	 head.next=reverseK(curr,k);	//attaching the head of with the output of the recursion
	return prev;

	}
	
	


	static void printRecursively(node head) {
		if(head==null) {
			return;
		}
		else
		{
			System.out.print(head.data+" ");
			printRecursively(head.next);			
		}
	}
	static void print(node head,node tail) {
		node temp=head;

		while(temp!=tail.next) {
			System.out.print(temp.data +"-->");
			temp=temp.next;
		}
		//System.out.print("null");
	}


	static node prepareLinkList() {
		Scanner s=new Scanner(System.in);
		int data=s.nextInt();
		node head=null;
		node tail=null;
		while(data!=-1) {
			node newnode= new node(data);
			if(head==null) {
				head=newnode;
				tail=newnode;
			}
			else
			{
				tail.next=newnode;			//tail is required to reduce the time compexity
				tail=tail.next;				//without tail order of n square
			}
			data=s.nextInt();		
		}	
		s.close();
		
		return head;
	}










}
