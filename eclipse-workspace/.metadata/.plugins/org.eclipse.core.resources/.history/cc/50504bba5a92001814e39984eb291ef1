package Trees;

import java.util.Scanner;

class BinaryTreeNode<T>{

	T data;
	BinaryTreeNode<T> left;
	BinaryTreeNode<T> right;

	public BinaryTreeNode(T data) {
		this.data=data;
	}

}
public class BinaryTree {
	
	//1.formatted tree
	//2.Height of tree
	//3.Search item
	//4.Mirror

	//1.height of the tree

	static Scanner s=new Scanner(System.in);
	
	
	
	static BinaryTreeNode<Integer> constructTree()
	{	
		int data=s.nextInt();	
		if(data==-1)
			return null;
		BinaryTreeNode<Integer> root=new BinaryTreeNode(data);
		root.left=constructTree();
		root.right=constructTree();
		return root;
		
	}

	public static void main(String[] args) {

		
		
		int data=s.nextInt();
		
		BinaryTreeNode<Integer> root=new BinaryTreeNode<>(data);
		
		
		
		



	}




	
	static int height(BinaryTreeNode<T> root)
	{
		if(root==null)
		{	
			return 0;

		}
		
		int height=0;
		int leftheight=height(root.left);
		int rightheight=height(root.right);

		if(leftheight>rightheight)
			return leftheight+1;
		else
			return rightheight+1;

	}


	static void formattedTree(BinaryTreeNode<Integer> root)
	{
		
		if(root==null)
		{
			return;
		}
		String str="";
		String rootp;
		String left;
		String right;
		
		if(root!=null)
		{
			rootp=""+root.data;
	
			if(root.left!=null)
				left=""+root.left.data;
			else
				left=null;
					
			if(root.right!=null)
				right=""+root.right.data;
			else
				right=null;
					
		str=rootp+left+right;
			
		System.out.println(str);
		
		}
		
		formattedTree(root.left);
		formattedTree(root.right);

	
	}

	static boolean SearchX(BinaryTreeNode<Integer> root,int x)
	{
		if(root.data==x)
			return true;	
		else
		{
			return false;		
		}
		
	
		 ans=SearchX(root.left, x);
		 ans=SearchX(root.right, x);

		 return ans;
		 
	}


	static void Mirror(BinaryTreeNode<Integer> root)
	{










	}



















}
