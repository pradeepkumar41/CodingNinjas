package DataStructure;

import java.util.Scanner;

class node1{
	int data;
	node1 next;
	public node1(int data){
		this.data=data;
	}
}
public class BubbleSort {



	static node1 bubbleSort(node1 head) {

		node1 curr1,curr2,prev1,next;
		int n=length(head);
		for(int i=0;i<n-1;i++) {

			prev1=null;
			curr1=head;
			curr2=head.next;
			next=curr2.next;

			for(int j=0;j<n-i;j++) {
				//System.out.println("here2");
				if(curr1.data>curr2.data) {
					//swap is required

					//System.out.println("here1");
					if(curr1.equals(head) || curr2.equals(head)) {
						//one of the position contain the head
						curr2.next=head;
						curr1.next=next;
						head=curr2;
						//System.out.println("here");

						//Incrementing the pointers		
						prev1=curr2;
						curr2=next;
						if(curr2==null)
							break;
						else
							next=next.next;

					}				
					else {
						curr2.next=curr1;
						curr1.next=next;
						prev1.next=curr2;

						//Incrementing the pointers
						prev1=curr2;
						curr2=next;
						if(curr2==null)
							break;
						else
							next=next.next;

					}

				}
				else {
					prev1=curr1;
					curr1=curr2;
					curr2=next;
					if(curr2==null)
						break;
					else
						next=next.next;						
				}

			}
		}


		return head;
	}

	static int length(node1 head) {
		node1  temp=head;
		int length=0;
		while(temp!=null) {
			temp=temp.next;
			length++;
		}
		return length;
	}

	static node1 prepareLinkList() {
		Scanner s=new Scanner(System.in);
		int data=s.nextInt();
		node1 head=null;
		node1 tail=null;
		while(data!=-1) {
			node1 newnode= new node1(data);
			if(head==null) {
				head=newnode;
				tail=newnode;
			}
			else
			{
				tail.next=newnode;			//tail is required to reduce the time compexity
				tail=tail.next;				//without tail order of n square
			}
			data=s.nextInt();		
		}	
		s.close();
		return head;
	}


	static void printRecursively(node1 head) {
		if(head==null) {
			return;
		}
		else
		{
			System.out.print(head.data+" ");
			printRecursively(head.next);			
		}
	}



	public static void main(String[] args) {

		node1 head= prepareLinkList();

		node1 result=bubbleSort(head);

		printRecursively(result);



	}




}
