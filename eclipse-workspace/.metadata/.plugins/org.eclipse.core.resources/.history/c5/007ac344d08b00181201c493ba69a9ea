package LinkListQuestion;

import java.util.Scanner;

import DataStructure.node;

//import DataStructure.node;

//import DataStructure.node;

//import DataStructure.node;


class node {
	public int data;
	public node next;
	public node(int data) {
		this.data=data;
		//	  	this.next = null;
	}
}

public class RearrangeTheLinkList {

	static node getTail(node head)
	{
		node temp=head;
		while(temp.next!=null)
			temp=temp.next;
		return temp;
	}

	static node reverseIterativeHalf(node head)
	{
		node mid=getMidNode(head);
		node prev,current,next;
		prev=mid;
		current=mid.next;
		next=mid.next.next;

		while(current!=null)
		{ current.next=prev;
		prev=current;
		current=next;
		if(next!=null)
			next=next.next;
		}
		
		return  head;

		//link list is reversed now;
	}
	
	
	static node prepareLinkList() {
		Scanner s=new Scanner(System.in);
		int data=s.nextInt();
		node head=null;
		node tail=null;
		while(data!=-1) {
			node newnode= new node(data);
			if(head==null) {
				head=newnode;
				tail=newnode;
			}
			else
			{
				tail.next=newnode;			//tail is required to reduce the time compexity
				tail=tail.next;				//without tail order of n square
			}
			data=s.nextInt();		
		}	
		s.close();
		
		return head;
	}

	static node getMidNode(node head)
	{
		node slow,fast;
		slow=head;
		fast=head;
	
		while(fast!=null)
		{if(fast.next==null || fast.next.next==null)
			break;
		fast=fast.next.next;
		//prev=slow;
		slow=slow.next;		//slow is going one step at each iteration
		}
		return slow;	//pointer to the mid node
	}
	
	
	public static node changelist(node head) {
		
		//reverse half the link list
		node tail=getTail(head);
		node mid=getMidNode(head);
		node newhead=reverseIterativeHalf(head);
		
		node newlist=newhead;
		node current=newhead;
		boolean flag=true; 
		while(newhead!=mid && tail!=mid)
		{
			if(flag)
			{
				current.next=tail;
				tail=tail.next;	
			}
			else
			{
				current.next=newhead;
				newhead=newhead.next;	
			}
			flag=!flag;
			current=current.next;
		}
		
		if(newhead.equals(mid) && tail.equals(mid))	//odd case
		{
			current.next=mid;
			mid.next=null;
			
			current=current.next;
		}
		else {			//even case 
				current.next=mid;
				mid.next=tail;
				tail.next=null;	
			}
		
		return head;
		}
	static void printRecursively(node head) {
		if(head==null) {
			return;
		}
		else
		{
			System.out.print(head.data+" ");
			printRecursively(head.next);			
		}
	}


	public static void main(String[] args) {
		
		node head=prepareLinkList();
		head=changelist(head);
		printRecursively(head);
		
		
	}

	
	
	
	}
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	

