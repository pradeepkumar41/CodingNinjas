package DataStructure;



class mergeNode {
	int data;
	mergeNode next;

	public mergeNode(int data) {
		this.data = data;
	}
}

public class MergeSort_MyCode {
	
static mergeNode getMidNode(mergeNode  head){
	
	mergeNode  slow=head,fast=head,prev=null;	
	while(fast!=null) {
	
		if(fast.next==null || fast.next.next==null)
			break;
		fast=fast.next.next;
		prev=slow;
		slow=slow.next;	
		
	}
	return prev;	//pointer to the mid node 
}


static mergeNode  mergeSort(mergeNode  head)
{
		
	//break after mid
	//create head2
	//rec on head
	//rec on head2
	
	if(head==null || head.next==null)
	{
		return null;
	}
	
	
	mergeNode  mid=getMidNode(head);
		mergeNode  head2=mid.next;
		mid.next=null;
		head=mergeSort(head);	//left part
		head2=mergeSort(head2);	//right part
		
		mergeNode  finalNode=merge(head,head2);
		return finalNode;

}


public static mergeNode mergeTwoList(mergeNode head1, mergeNode head2) {


	mergeNode mergehead=null,current=null;	//variables for new LL	

	mergeNode temp1,temp2;		
	temp1=head1;
	temp2=head2;

	//step to initilse the final linked list
	if(temp1.data>temp2.data) {

		mergehead=temp2;
		temp2=temp2.next;

	}
	else
	{
		mergehead=temp1;
		temp1=temp1.next;

	} 

	current=mergehead;

	while(temp1!=null && temp2!=null)
	{	
		if(temp1.data>temp2.data)
		{
			current.next=temp2;
			temp2=temp2.next;	//increment the LL 2 pointer
		}
		else
		{
			current.next=temp1;
			temp1=temp1.next;	//increment the LL 2 pointer	
		}
		current=current.next;	//increment the current pointer

	}

	if(temp1!=null)
	{
		current.next=temp1;

	}
	else
	{
		current.next=temp2;
	}
	return mergehead;
}

	
	
	
	
}
